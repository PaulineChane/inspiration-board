{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/BoardList.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","onClick","deleteCard","id","text","emojiText","emoji","getUnicode","EMOJI_LIST","names","NewCardForm","useState","boardName","formData","updateFormData","onFieldChange","event","newFormData","target","name","value","onSubmit","preventDefault","addCard","placeholder","onChange","emojis","emojiSelect","push","unshift","emojiList","boards","boardSelect","item","board","boardList","type","BoardList","onBoardChange","changeCurrentBoard","boardOptions","currentBoard","Board","allBoards","updateBoards","cardsList","setCardsList","errorMessage","setErrorMessage","updateBoard","BASE_URL","url","CARDS_URL","replace","getBoardsAsync","useCallback","axios","get","getCardsAsync","useEffect","Promise","all","then","promiseBoards","promiseCards","data","catch","error","console","log","message","errorData","errors","allErrors","card","newCardList","post","response","newId","cards","allCards","newCardsList","delete","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.400a98ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  const removeCard = () => {\n    props.deleteCard(props.id);\n  }\n\n  return (\n    <div className=\"card\">\n      <button className = \"card__delete\" onClick = {removeCard}> delete</button>\n      <section className = \"card__content\">\n        <h2 className = \"card__content-text\">{props.text}</h2>\n        <p className = \"card__content-emoji\">{props.emojiText ? emoji.getUnicode(props.emojiText) : ''}</p>\n      </section>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string, \n  emoji: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { Component, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = emoji.names;\n\nconst NewCardForm = (props) => {\n\n    const [formData, updateFormData] = useState({text: '', emoji: '', boardName: props.boardName})\n\n    // lifting this from exquisite react for responsive text area\n    const onFieldChange = (event) => {\n        const newFormData = {...formData};\n        newFormData[event.target.name] = event.target.value;\n        updateFormData(newFormData);\n    }\n\n    // for drop-down emoji options\n    \n    const emojiList = (emojis) => {\n        let emojiSelect = []\n\n        for( const emojiText of emojis) {\n            emojiSelect.push(<option key = {emojiText} value = {emojiText}> {emojiText}</option>);\n        }\n\n        emojiSelect.unshift(<option key = 'empty' value = ''> NONE </option>);\n        return (<select id = 'emoji'\n                name = 'emoji' \n                value = {formData.emoji}\n                className = 'new-card-form__form-select' \n                onChange = {onFieldChange}> {emojiSelect} </select>);\n    }\n\n        // for drop-down board options\n    \n    const boardList = (boards) => {\n        let boardSelect = []\n    \n        for( const item of boards) {\n            // add own board to top of list\n            if (item.board.name !== props.boardName) {\n                boardSelect.push(<option key = {item.board.name} value = {item.board.name}>{item.board.name} {item.board.name === formData.boardName ? '(selected board)' : ''}</option>);\n            }\n        }\n        \n        boardSelect.unshift(<option key = {props.boardName} value = {props.boardName}> {props.boardName} (current board)</option>);\n\n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {formData.boardName}\n                    className = 'new-card-form__form-select'\n                    onChange = {onFieldChange}> {boardSelect} </select>);\n    }\n    \n    // for submit button \n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        props.addCard(formData);\n\n        updateFormData({text: '', emoji: '', boardName: props.boardName});\n    }\n\n    return (\n        <section className = 'new-card-form' onSubmit = {onSubmit}>\n            <h2 className = 'new-card-form__header'>add a card</h2>\n            <form className = 'new-card-form__form'>\n\n                <label className = 'new-card-form__form-label'>text</label>\n                <textarea id = 'text'\n                        name = 'text' \n                        value = {formData.text}\n                        placeholder = \"inspire your board or someone else's!\"\n                        className = 'new-card-form__form-textarea' \n                        onChange = {onFieldChange}></textarea>\n\n                <label className = 'new-card-form__form-label'>{emoji ? emoji.getUnicode(formData.emoji) : ''} emoji</label>\n                {emojiList(EMOJI_LIST)}\n\n                <label className = 'new-card-form__form-label'>board</label>\n                {boardList(props.boards)}\n\n                <input type='submit' value = 'submit card' className = 'new-card-form__form-button' />\n            </form>\n        </section>\n    );\n}\n\nNewCardForm.propTypes = {\n    url: PropTypes.string.isRequired,\n    boardName: PropTypes.string.isRequired,\n    addCard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default NewCardForm;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './BoardList.css';\n\nconst BoardList = (props) => {\n\n    const onBoardChange = (event) => {\n        props.changeCurrentBoard(event.target.value);\n    }\n\n    const boardSelect = (boards) => {\n\n        let boardOptions = []\n    \n        for( const item of boards) {\n            if(item.board.name !== props.currentBoard) {\n                boardOptions.push(<option key = {item.board.name} value = {item.board.name}>{item.board.name}</option>);\n            }\n        }\n\n        boardOptions.unshift(<option key = {props.currentBoard} value = {props.currentBoard}>{props.currentBoard} (current board)</option>)\n        \n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {props.currentBoard}\n                    className = 'board-list__div-select' \n                    onChange = {onBoardChange}> {boardOptions} </select>);\n    }\nreturn (\n    <div className = 'board-list'>\n        <h2 className = 'board-list__header'>view board</h2>\n        <div className = 'board-list__div'>\n            {boardSelect(props.boards)}\n        </div>\n    </div>\n);\n}\n\nBoardList.propTypes = {\n    currentBoard: PropTypes.string.isRequired,\n    changeCurrentBoard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default BoardList;","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\nimport BoardList from './BoardList';\n// import CARD_DATA from '../data/card-data.json';\n\nconst Board = (props) => {\n// jest really didn't like when i wrapped this in useEffect, so i'm pulling board info here\n  const [allBoards, updateBoards] = useState([]);\n  const [cardsList, setCardsList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [currentBoard, updateBoard] = useState(props.boardName);\n\n  const BASE_URL = props.url;\n  const CARDS_URL = props.url.replace('boards', 'cards')\n\n  // function to obtain promises to update states\n  const getBoardsAsync = useCallback(() => {\n    return(axios.get(BASE_URL));\n  },[BASE_URL])\n\n  const getCardsAsync = useCallback(() => {\n    return(axios.get(`${BASE_URL}${currentBoard}/cards`));\n  },[currentBoard, BASE_URL])\n\n\n  // does not update state until both functions return \n  useEffect(() => {\n    Promise.all([getBoardsAsync(), getCardsAsync()])\n    .then(([promiseBoards, promiseCards])=>{\n      // get list of boards\n      updateBoards(promiseBoards.data);\n      setCardsList(promiseCards.data);\n      setErrorMessage(null);\n    })\n    .catch((error)=>{\n      setErrorMessage(['Failed to retrieve cards or boards.']);\n      console.log(error.message);\n    });\n  }, [getBoardsAsync, getCardsAsync])\n\n  const addCard = (card) => {\n    const newCardList  = [...cardsList];\n    const post = {text: card.text, emoji: card.emoji}\n    axios.post(`${BASE_URL}${card.boardName}/cards`, post)\n    .then( (response) => {\n      // only add card to board if the post is for this particular board\n      if(card.boardName === currentBoard) {\n        const newId = response.data.card.id;\n    \n        newCardList.push({\n          card: {\n            id: newId,\n            text: card.text, \n            emoji: card.emoji,\n          }  \n        })\n      }\n      setCardsList(newCardList);\n      setErrorMessage(null);\n    })\n    .catch( (error) => {\n      setErrorMessage(['Failed to add card.']);\n      console.log(error.message);\n    });\n\n\n  }\n\n  // delete a card from cardsList\n  const deleteCard = (id) => {\n    let newCardsList = [];\n    for (const item of cardsList) {\n      // cardsList is pulled from the API, meaning anything in cardsList should ideally have a matching id\n      if(id === item.card.id) {\n        axios.delete(`${CARDS_URL}/${id}`)\n          // if successful, deleted, send confirmation to console\n          .then((response) => {\n            console.log(`Card ${id} successfully deleted`);\n            setErrorMessage(null);\n          })\n          .catch((error) => {\n            // don't add the card back in -- likely this card was deleted from the api after components mounted\n            setErrorMessage([`Could not delete card ${id}.`]);\n          });\n      } else {\n        newCardsList.push(item);\n      }\n    }\n\n    setCardsList(newCardsList);\n  }\n\n  // for API data ONLY \n  const allCards = (cards, deleteCard) => {\n    \n    let cardsList = [];\n\n    for(const item of cards) {\n      cardsList.push(<Card id = {item.card.id} text={item.card.text} emojiText={item.card.emoji} deleteCard = {deleteCard}/>);\n    }\n    return cardsList;\n  }\n\n  // if currentBoard changed\n\n  const changeCurrentBoard = (boardName) => {  \n    updateBoard(boardName);\n  }\n\n  // for error message\n  const allErrors = (errorData) => {\n    const errors = [];\n    for(const error of errorData) {\n      errors.push(<li>{error}</li>);\n    }\n\n    return errors;\n  }\n\n  return (\n    <div>\n      <article className = 'validation-errors-display'>\n        <ul className = 'validation-errors-display__list'>\n            {errorMessage ? allErrors(errorMessage) : ''}\n        </ul>\n      </article> \n      <BoardList currentBoard ={currentBoard} boards = {allBoards} changeCurrentBoard = {changeCurrentBoard}/>\n      <NewCardForm url = {CARDS_URL} boardName = {currentBoard} addCard = {addCard} boards = {allBoards}/>\n      <section className = 'board'>\n        {allCards(cardsList, deleteCard)}\n      </section>\n    </div>\n  )\n};\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={`pchane-reaction`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}