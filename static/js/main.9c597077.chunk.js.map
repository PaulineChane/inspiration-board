{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","onClick","deleteCard","id","text","emojiText","emoji","getUnicode","EMOJI_LIST","names","NewCardForm","useState","boardName","formData","updateFormData","onFieldChange","event","newFormData","target","name","value","onSubmit","preventDefault","addCard","placeholder","onChange","emojis","emojiSelect","push","emojiList","boards","boardSelect","item","board","unshift","boardList","type","Board","cardsList","setCardsList","errorMessage","setErrorMessage","allBoards","updateBoards","BASE_URL","url","CARDS_URL","replace","useEffect","axios","get","then","response","apiCardsList","data","catch","error","console","log","message","apiBoardsList","errorData","errors","allErrors","card","newCardList","post","newId","cards","allCards","newCardsList","delete","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9c597077.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  const removeCard = () => {\n    props.deleteCard(props.id);\n  }\n\n  return (\n    <div className=\"card\">\n      <button className = \"card__delete\" onClick = {removeCard}> delete</button>\n      <section className = \"card__content\">\n        <h2 className = \"card__content-text\">{props.text}</h2>\n        <p className = \"card__content-emoji\">{props.emojiText ? emoji.getUnicode(props.emojiText) : ''}</p>\n      </section>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  text: PropTypes.string, \n  emoji: PropTypes.string,\n  deleteCard: PropTypes.func.isRequired,\n};\n\nexport default Card;\n","import React, { Component, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = emoji.names;\n\nconst NewCardForm = (props) => {\n\n    const [formData, updateFormData] = useState({text: '', emoji: '', boardName: props.boardName})\n\n    // lifting this from exquisite react for responsive text area\n    const onFieldChange = (event) => {\n        const newFormData = {...formData};\n        newFormData[event.target.name] = event.target.value;\n        updateFormData(newFormData);\n    }\n\n    // for drop-down emoji options\n    \n    const emojiList = (emojis) => {\n        let emojiSelect = []\n\n        for( const emojiText of emojis) {\n            emojiSelect.push(<option value = {emojiText}> {emojiText}</option>);\n        }\n\n        return (<select id = 'emoji'\n                name = 'emoji' \n                value = {formData.emoji}\n                className = 'new-card-form__form-select' \n                onChange = {onFieldChange}> {emojiSelect} </select>);\n    }\n\n        // for drop-down board options\n    \n    const boardList = (boards) => {\n        let boardSelect = []\n    \n        for( const item of boards) {\n            // add own board to top of list\n            if (item.board.name !== props.boardName) {\n                boardSelect.push(<option value = {item.board.name}>{item.board.name} {item.board.name === formData.boardName ? '(selected board)' : ''}</option>);\n            }\n        }\n        \n        boardSelect.unshift(<option value = {props.boardName}> {props.boardName} (current board)</option>);\n\n        return(<select id = 'boardName'\n                    name = 'boardName'\n                    value = {formData.boardName}\n                    className = 'new-card-form__form-select'\n                    onChange = {onFieldChange}> {boardSelect} </select>);\n    }\n    \n    // for submit button \n    const onSubmit = (event) => {\n        event.preventDefault();\n\n        props.addCard(formData);\n\n        updateFormData({text: '', emoji: '', boardName: props.boardName});\n    }\n\n    return (\n        <section className = 'new-card-form' onSubmit = {onSubmit}>\n            <h2 className = 'new-card-form__header'>add a card</h2>\n            <form className = 'new-card-form__form'>\n\n                <label className = 'new-card-form__form-label'>text</label>\n                <textarea id = 'text'\n                        name = 'text' \n                        value = {formData.text}\n                        placeholder = \"inspire your board or someone else's!\"\n                        className = 'new-card-form__form-textarea' \n                        onChange = {onFieldChange}></textarea>\n\n                <label className = 'new-card-form__form-label'>{emoji ? emoji.getUnicode(formData.emoji) : ''} emoji</label>\n                {emojiList(EMOJI_LIST)}\n\n                <label className = 'new-card-form__form-label'>board</label>\n                {boardList(props.boards)}\n\n                <input type='submit' value = 'submit card' className = 'new-card-form__form-button' />\n            </form>\n        </section>\n    );\n}\n\nNewCardForm.propTypes = {\n    url: PropTypes.string.isRequired,\n    boardName: PropTypes.string.isRequired,\n    addCard: PropTypes.func.isRequired,\n    boards: PropTypes.arrayOf(PropTypes.shape({board: PropTypes.shape(\n        {id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired}\n    )})).isRequired\n};\n\nexport default NewCardForm;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nconst Board = (props) => {\n\n  const [cardsList, setCardsList] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [allBoards, updateBoards] = useState([]);\n\n  const BASE_URL = props.url;\n  const CARDS_URL = props.url.replace('boards', 'cards')\n  // useEffect to get cards\n  useEffect(() => {\n    axios.get(`${BASE_URL}${props.boardName}/cards`)\n      .then( (response) => {\n        // get list of cards\n        const apiCardsList = response.data;\n        setCardsList(apiCardsList);\n      })\n      .catch( (error) => {\n        setErrorMessage(['Failed to retrieve cards.']);\n        console.log(error.message);\n      });\n      \n    axios.get(BASE_URL)\n      .then( (response) => {\n        // get list of boards\n        const apiBoardsList = response.data;\n        updateBoards(apiBoardsList);\n      })\n      .catch( (error) => {\n        setErrorMessage(['Failed to retrieve boards.']);\n        console.log(error.message);\n      });\n  },[]);\n\n  // add a card to cardsList \n  const addCard = (card) => {\n    const newCardList  = [...cardsList];\n    const post = {text: card.text, emoji: card.emoji}\n    axios.post(`${BASE_URL}${card.boardName}/cards`, post)\n    .then( (response) => {\n      // only add card to board if the post is for this particular board\n      if(card.boardName === props.boardName) {\n        const newId = response.data.card.id;\n    \n        newCardList.push({\n          card: {\n            id: newId,\n            text: card.text, \n            emoji: card.emoji,\n          }  \n        })\n      }\n      setCardsList(newCardList);\n    })\n    .catch( (error) => {\n      setErrorMessage(['Failed to add card.']);\n      console.log(error.message);\n    });\n\n\n  }\n\n  // delete a card from cardsList\n  const deleteCard = (id) => {\n    let newCardsList = [];\n    for (const item of cardsList) {\n      // cardsList is pulled from the API, meaning anything in cardsList should ideally have a matching id\n      if(id === item.card.id) {\n        axios.delete(`${CARDS_URL}/${id}`)\n          // if successful, deleted, send confirmation to console\n          .then((response) => {\n            console.log(`Card ${id} successfully deleted`);\n          })\n          .catch((error) => {\n            // don't add the card back in -- likely this card was deleted from the api after components mounted\n            setErrorMessage([`Could not delete card ${id}.`]);\n          });\n      } else {\n        newCardsList.push(item);\n      }\n    }\n\n    setCardsList(newCardsList);\n  }\n\n  // for API data ONLY \n  const allCards = (cards, deleteCard) => {\n    \n    let cardsList = [];\n\n    for(const item of cards) {\n      cardsList.push(<Card id = {item.card.id} text={item.card.text} emojiText={item.card.emoji} deleteCard = {deleteCard}/>);\n    }\n    return cardsList;\n  }\n\n  // for error message\n  const allErrors = (errorData) => {\n    const errors = [];\n    for(const error of errorData) {\n      errors.push(<li>{error}</li>);\n    }\n\n    return errors;\n  }\n\n  return (\n    <div>\n      <article className = 'validation-errors-display'>\n        <ul className = 'validation-errors-display__list'>\n            {errorMessage ? allErrors(errorMessage) : ''}\n        </ul>\n      </article> \n      <NewCardForm url = {CARDS_URL} boardName = {props.boardName} addCard = {addCard} boards = {allBoards}/>\n      <section className = 'board'>\n        {allCards(cardsList, deleteCard)}\n      </section>\n    </div>\n  )\n};\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={`pchane-reaction`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}